!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).MeetJS=e()}}((function(){return function e(t,o,i){function r(s,a){if(!o[s]){if(!t[s]){var E="function"==typeof require&&require;if(!a&&E)return E(s,!0);if(n)return n(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var l=o[s]={exports:{}};t[s][0].call(l.exports,(function(e){return r(t[s][1][e]||e)}),l,l.exports,e,t,o,i)}return o[s].exports}for(var n="function"==typeof require&&require,s=0;s<i.length;s++)r(i[s]);return r}({1:[function(e,t,o){t.exports={SOCKET_EVENTS:{CALL:"CALL",ACCEPT:"ACCEPT",OFFER:"OFFER",ANSWER:"ANSWER",CANDIDATE:"CANDIDATE",PING:"PING",PONG:"PONG",NOTFOUND:"NOTFOUND",REJECT:"REJECT",CANCEL:"CANCEL",CANCELLED:"CANCELLED",REJECTED:"REJECTED",INVITE:"INVITE",BYE:"BYE",BABYE:"BABYE",MESSAGE:"MESSAGE",CONFERENCE:"CONFERENCE",READY:"READY",CONNECTED:"CONNECTED",DISCONNECTED:"DISCONNECTED"},LOCAL_EVENTS:{CONNECT_MEDIA:"CONNECT_MEDIA",DEVICE_CONNECTED:"DEVICE_CONNECTED",REMOVE_USER:"REMOVE_USER",RECEIVED_MESSAGE:"RECEIVED_MESSAGE",CONFERENCE:"CONFERENCE",CONNECT_CONFERENCE:"CONNECT_CONFERENCE",SEND_MESSAGE:"SEND_MESSAGE",CONNECT:"CONNECT",RECONNECT:"RECONNECT",MUTE_AUDIO:"MUTE_AUDIO",MUTE_VIDEO:"MUTE_VIDEO",STOP_MEDIA:"STOP_MEDIA",SHARE_SCREEN:"SHARE_SCREEN"}}},{}],2:[function(e,t,o){const i=e("./Constants");t.exports=function(e){return e.events={},e.SOCKET_EVENTS=i.SOCKET_EVENTS,e.LOCAL_EVENTS=i.LOCAL_EVENTS,e.on=function(t,o){return"object"!=typeof e.events[t]&&(e.events[t]=[]),e.events[t].push(o),this},e.off=function(t,o){let i;"object"==typeof e.events[t]&&(i=e.events[t].indexOf(o),i>-1&&e.events[t].splice(i,1))},e.emit=function(t){var o,i,r,n=[].slice.call(arguments,1);if("object"==typeof e.events[t])for(r=(i=e.events[t].slice()).length,o=0;o<r;o++)i[o].apply(e,n)},e.once=function(t,o){e.on(t,(function i(){e.off(t,i),o.apply(e,arguments)}))},this}},{"./Constants":1}],3:[function(e,t,o){const i=function(){};i.prototype.isMeetJS=!0,i.prototype.logs=[],i.prototype.logMessage=function(e,t){let o=` ${(new Date).toLocaleString()} - ${e} : ${t}`;i.prototype.logs.push(o)},i.prototype.print=function(){if(!i.prototype.logs||0===i.prototype.logs.length)return;let e="";i.prototype.logs.forEach((function(t,o){e+=""+t,o!==i.prototype.logs.length&&(e+="\n")}));let t="data:application/octet-stream,"+encodeURIComponent(e);var o=document.createElement("a");return o.href=t,o.download=`MeetJS-log-${(new Date).toLocaleString()}.txt`,o.click(),"log file is downloading....."};const r=function(e,arguments){let t=!0;if(MeetJS.debug||"log"!==e||(t=!1),1===arguments.length)return t&&console[e](arguments[0]),void i.prototype.logMessage(`[ ${e} ]`,JSON.stringify(arguments[0]));if(2===arguments.length)return t&&console[e](arguments[0],arguments[1]),void i.prototype.logMessage(`[ ${e} ]`,`${JSON.stringify(arguments[0])} , ${JSON.stringify(arguments[1])}`);if("object"==typeof arguments[0])throw new Error("log group name cannot be object");const o=arguments[0];t&&console.group(o),[...arguments].forEach((function(r,n){0!==n&&(t&&console[e](r),i.prototype.logMessage(`[ ${e} - ${o} ]`,JSON.stringify(r)))})),t&&console.groupEnd()};["log","info","warn","error"].forEach((function(e){i.prototype[e]=function(){r(e,arguments)}})),t.exports=new i},{}],4:[function(e,t,o){const i={iceServers:[{urls:["stun:stun.l.google.com:19302"]},{urls:["turn:207.148.124.163:3478","turn:207.148.124.163:3478?transport=tcp"],username:"1596262710",credential:"5DX48ynOZOy5J0EL7Ae3CS6JshI="},{urls:["turn:numb.viagenie.ca","turn:numb.viagenie.ca?transport=tcp"],credential:"muazkh",username:"webrtc@live.com"},{urls:["turn:numb.viagenie.ca","turn:numb.viagenie.ca?transport=tcp"],username:"normanarguet@gmail.com",credential:"1ceCre4m007"}]};class r extends RTCPeerConnection{constructor(e){super(i),this.remotePeer=e,this.rStream=null,this.lStream=null,this.gotStream=null,this.intimateOffer=null,this.awaitOffer=null,this.handleCallEvents=null,super.onicecandidate=this.onicecandidate,super.onnegotiationneeded=this.onnegotiationneeded,super.ontrack=this.ontrack,Logger.log(e+" peer started")}configureDataChannel=()=>{this.dataChannel=this.createDataChannel("dataChannel",{reliable:!0}),this.dataChannel.onerror=function(e){Logger.log("Error occured on datachannel:",e)},this.dataChannel.onmessage=function(e){Logger.log("message:",e)},this.dataChannel.onclose=function(){Logger.log("data channel is closed")},this.callState=!1};initConfiguration=e=>{if(MeetJS.customConfig){if(0===e.iceServers.length)return void console.error("configuration received is invalid!","Fallback to the default");Logger.log("configuration Applied successfully");let t=this.getConfiguration();return t.iceTransportPolicy="relay",t.iceServers=e.iceServers,void this.setConfiguration(t)}Logger.log("Custom ConFig is disabled")};getOfferOptions=()=>({offerToReceiveAudio:!0,offerToReceiveVideo:!0});configureStream=e=>{e&&(this.lStream=e,e.getTracks().forEach(t=>{this.addTrack(t,e)}),Logger.log("stream added : "+e.id))};changeStream=(e,t)=>{this.getSenders().find(e=>e.track.kind===t).replaceTrack(e.getVideoTracks()[0]),e.addTrack(MeetJS.getLocalStream().getAudioTracks()[0]),this.lStream=e,this.gotStream(this)};ontrack=e=>{this.lStream||this.configureStream(MeetJS.getLocalStream()),this.lStream.id!==e.streams[0].id&&(Logger.log(e.streams[0].id),Logger.log("stream received"),Logger.log(e.streams[0]),this.rStream=e.streams[0],this.gotStream(this))};sendMessage=e=>{Logger.log("Messaging via data channel"),this.dataChannel.send(JSON.stringify(e))};sendOffer=()=>{this.createOffer(this.getOfferOptions()).then(this.prepareOffer).catch(e=>this.onError(e))};prepareOffer=e=>{this.setLocalDescription(e),Logger.log("sending offer"),MeetJS.send({remotePeer:this.remotePeer,event:MeetJS.SOCKET_EVENTS.OFFER,data:e})};onnegotiationneeded=()=>{this.callState&&(this.sendOffer(this.remotePeer),Logger.log("re negotiation is happening"))};onicecandidate=e=>{e.candidate&&(MeetJS.send({remotePeer:this.remotePeer,event:MeetJS.SOCKET_EVENTS.CANDIDATE,data:e.candidate}),Logger.log("sending iceCandidate to "+this.remotePeer))};acceptOffer=()=>this.sendOffer();sendInvite=()=>{MeetJS.send({remotePeer:this.remotePeer,event:MeetJS.SOCKET_EVENTS.INVITE})};rejectOffer=()=>{MeetJS.send({remotePeer:this.remotePeer,event:MeetJS.SOCKET_EVENTS.REJECT,data:"i can't take calls right now"})};cancelOffer=()=>{MeetJS.send({remotePeer:this.remotePeer,event:MeetJS.SOCKET_EVENTS.CANCEL})};endCall=()=>{MeetJS.send({remotePeer:this.remotePeer,event:MeetJS.SOCKET_EVENTS.BYE,data:"I am gonna end the call!"})};endCallBye=()=>{MeetJS.send({remotePeer:this.remotePeer,event:MeetJS.SOCKET_EVENTS.BABYE,data:"I am gonna end the call!"})};handleOffer=e=>{this.setRemoteDescription(new RTCSessionDescription(e)),this.createAnswer().then(e=>{this.setLocalDescription(e),MeetJS.send({remotePeer:this.remotePeer,event:MeetJS.SOCKET_EVENTS.ANSWER,data:e}),this.callState=!0,Logger.log("connection established successfully!!")}).catch(e=>this.onError(e))};handleCandidate=e=>{this.addIceCandidate(new RTCIceCandidate(e)),Logger.log("Candidate received")};handleAnswer=e=>{this.setRemoteDescription(new RTCSessionDescription(e)),this.callState=!0,Logger.log("connection established successfully!!")};onError=e=>{console.error(e)}}t.exports=r},{}],5:[function(e,t,o){const i=e("./SignalingChannel"),r=e("./MeetPeer"),n=e("./Stream"),s=e("./MessageHandler"),a=e("./EventEmitter");window.Logger=e("./Logger");const E=e("./Utils"),c=function(e){window.MeetJS=this,a(this);var t=new n;this.users=[],this.sharingScreen=!1,this.activeUsers=[],this.debug=e.debug,this.customConfig=e.customConfig||!1;var o=e.autoRevokeMedia||!1,c=3;this.getActiveCallUsers=()=>E.getKeysFromObject(this.users),this.getRemainingAttempts=()=>c;this.getLocalStream=()=>{if(t.localStream)return t.localStream;throw new Error("Connect to camera first!")},this.toggleScreenShare=async()=>{this.isScreenShare?(t.displayStream&&t.disconnectDisplayShare(),Logger.log("ScreenSharing disabled"),this.getActiveCallUsers().forEach(e=>{this.users[e].changeStream(t.localStream,"video")}),this.isScreenShare=!1):(t.displayStream||await t.connectShareMedia(),Logger.log("ScreenSharing enabled"),this.getActiveCallUsers().forEach(e=>{this.users[e].changeStream(t.displayStream,"video")}),this.isScreenShare=!0)},this.on(this.LOCAL_EVENTS.CONNECT_MEDIA,()=>{t.connectMedia(e.mediaConstrains||this.DEFAULT_PROPS.mediaConstrains).then(e=>{e&&this.emit(this.LOCAL_EVENTS.DEVICE_CONNECTED)}).catch(e=>{Logger.log(e)})});var l=t=>{t||Logger.log("No userName provided, Fallback to random"),this.userName=t||this.DEFAULT_PROPS.defaultUserName(),this.transport=new i(this.userName,(e.contextPath?e.contextPath:"meet")+(e.token?"?jwt="+e.token:""),e.url||this.DEFAULT_PROPS.transportUrl.local),this.transport.onready=e=>{this.emit(this.SOCKET_EVENTS.READY,e)},this.transport.onMessage=e=>{s(e)}};this.on(this.LOCAL_EVENTS.RECONNECT,()=>{c<=0||(c-=1,Logger.log("remaining attempts",c),l(this.userName))}),this.on(this.LOCAL_EVENTS.CONNECT,l),this.send=e=>this.transport.send(e),this.on(this.LOCAL_EVENTS.SEND_MESSAGE,({remotePeer:e,data:t})=>{this.transport.send({remotePeer:e,event:this.SOCKET_EVENTS.MESSAGE,data:t})}),this.getUser=e=>{if(e)return this.users[e]?this.users[e]:h(e);console.errors("userName is empty")},this.on(this.LOCAL_EVENTS.MUTE_AUDIO,()=>t.toogleMute({audio:!0})),this.on(this.LOCAL_EVENTS.MUTE_VIDEO,()=>t.toogleMute({video:!0})),this.on(this.LOCAL_EVENTS.STOP_MEDIA,()=>t.stopMedia({audio:!0,video:!0})),this.on(this.SOCKET_EVENTS.CONFERENCE,({remotePeer:e,users:t})=>{this.transport.send({remotePeer:e,event:this.SOCKET_EVENTS.CONFERENCE,data:{users:t}})}),this.on(this.LOCAL_EVENTS.CONNECT_CONFERENCE,e=>{e.users&&(Logger.log("confere",e),window.conference=e.users,e.users.forEach(e=>{g("sendOffer",e)}))}),this.on(this.SOCKET_EVENTS.CALL,e=>{Logger.log("calling "+e),this.emit(this.LOCAL_EVENTS.CONNECT_MEDIA),this.once(this.LOCAL_EVENTS.DEVICE_CONNECTED,()=>{g("sendInvite",e)})}),this.on(this.SOCKET_EVENTS.ACCEPT,e=>{Logger.log("accepting invite from "+e),this.emit(this.LOCAL_EVENTS.CONNECT_MEDIA),this.once(this.LOCAL_EVENTS.DEVICE_CONNECTED,()=>{g("acceptOffer",e)})}),this.on(this.SOCKET_EVENTS.CANCEL,e=>{Logger.log("cancelling the invite from "+e),g("cancelOffer",e)}),this.on(this.SOCKET_EVENTS.REJECT,e=>{Logger.log("rejecting the invite from "+e),g("rejectOffer",e)}),this.on(this.SOCKET_EVENTS.BYE,e=>{Logger.log("Hanging up call with "+e),g("endCall",e)}),this.on(this.LOCAL_EVENTS.REMOVE_USER,e=>{g("close",e),delete this.users[e],this.emit(this.SOCKET_EVENTS.DISCONNECTED,e)});var g=(e,t)=>{this.getUser(t)[e]()},S=e=>{var t=e.currentTarget;"failed"===t.connectionState&&(this.emit(this.SOCKET_EVENTS.DISCONNECTED,t.remotePeer),this.emit(this.LOCAL_EVENTS.REMOVE_USER,t.remotePeer)),Logger.log(t.remotePeer,t.connectionState)};this.on(this.SOCKET_EVENTS.CONNECTED,()=>{this.on(this.SOCKET_EVENTS.DISCONNECTED,()=>{o?(Logger.log("autoRevokeMedia is enabled"),this.emit(this.LOCAL_EVENTS.STOP_MEDIA)):Logger.log("autoRevokeMedia is disabled","revoke userMedia by emiting STOP_MEDIA")})});var h=e=>{var o=new r(e);return o.gotStream=e=>{this.emit(this.SOCKET_EVENTS.CONNECTED,e)},o.onconnectionstatechange=S,o.configureStream(t.localStream),this.users[e]=o,o}};c.prototype.DEFAULT_PROPS={defaultUserName:function(){return"user"+Math.floor(100*Math.random())+1},transportUrl:{origin:window.location.origin.replace("http","ws"),local:"ws://localhost:8080",remote:"wss://meet-v1.herokuapp.com"},mediaConstrains:{video:!0,audio:!0}},t.exports=c},{"./EventEmitter":2,"./Logger":3,"./MeetPeer":4,"./MessageHandler":6,"./SignalingChannel":7,"./Stream":8,"./Utils":9}],6:[function(e,t,o){const i=e=>{Logger.log("received Bye"),MeetJS.emit(MeetJS.LOCAL_EVENTS.REMOVE_USER,e.peerName),MeetJS.getUser(e.peerName).endCallBye()},r=e=>{(Logger.log("received invite"),e.configuration)&&MeetJS.getUser(e.peerName).initConfiguration(e.configuration);MeetJS.emit(MeetJS.SOCKET_EVENTS.INVITE,e.peerName)},n=e=>{Logger.log("received offer");var t=MeetJS.getUser(e.peerName);e.configuration&&t.initConfiguration(e.configuration),t.handleOffer(e.data)},s=e=>{Logger.log("received iceCandidate from "+e.peerName),MeetJS.getUser(e.peerName).handleCandidate(e.data)},a=e=>{Logger.log("received answer"),MeetJS.getUser(e.peerName).handleAnswer(e.data)};t.exports=e=>{switch(Logger.log("MessageHandler",e),e.event){case MeetJS.SOCKET_EVENTS.OFFER:n(e);break;case MeetJS.SOCKET_EVENTS.ANSWER:a(e);break;case MeetJS.SOCKET_EVENTS.CANDIDATE:s(e);break;case MeetJS.SOCKET_EVENTS.REJECT:Logger.log("received call event"),MeetJS.emit(MeetJS.SOCKET_EVENTS.REJECTED,e.peerName);break;case MeetJS.SOCKET_EVENTS.CANCEL:Logger.log("received call event"),MeetJS.emit(MeetJS.SOCKET_EVENTS.CANCELLED,e.peerName);break;case MeetJS.SOCKET_EVENTS.NOTFOUND:Logger.log("received not found"),MeetJS.emit(MeetJS.SOCKET_EVENTS.NOTFOUND,e.peerName);break;case MeetJS.SOCKET_EVENTS.INVITE:r(e);break;case MeetJS.SOCKET_EVENTS.BYE:i(e);break;case MeetJS.SOCKET_EVENTS.BABYE:Logger.log("received BaBye"),MeetJS.emit(MeetJS.LOCAL_EVENTS.REMOVE_USER,e.peerName);break;case MeetJS.SOCKET_EVENTS.MESSAGE:MeetJS.emit(MeetJS.LOCAL_EVENTS.RECEIVED_MESSAGE,{userName:e.peerName,data:e.data});case MeetJS.SOCKET_EVENTS.CONFERENCE:MeetJS.emit(MeetJS.LOCAL_EVENTS.CONNECT_CONFERENCE,e.data)}}},{}],7:[function(e,t,o){class i extends WebSocket{constructor(e=null,t="",o=null){super(((e,t)=>{const o=(e?"":"https:"===window.location.protocol?"wss://":"ws://")+(null!==e?e:window.location.host)+"/"+t;return Logger.log("connecting... to "+o," with userName :"+MeetJS.userName),o})(o,t)),this.getUser=null,super.onmessage=this.onmessage,super.onopen=this.onopen,super.onclose=this.onclose,super.onerror=this.onerror,this.superSend=super.send,this.PING_INTERVAL=29,this.SECOND=1e3,this.id=Math.floor(2*Math.random())+1}keepAlive=()=>{var e=this.PING_INTERVAL*this.SECOND;this.readyState===this.OPEN&&(Logger.log("Pinging server ... idle timeout: "+e/this.SECOND+"s"),this.send({event:MeetJS.SOCKET_EVENTS.PING,data:{message:"hello"}})),this.timerId=setTimeout(this.keepAlive,e)};updateActiveUsers=e=>{if(MeetJS.activeUsers[e]){Logger.log(e," is Online!");var t=MeetJS.activeUsers[e];t.isOnline=!0,t.lastPing=new Date(Date.now()),clearTimeout(t.timeout),t.timeout=setTimeout(()=>{Logger.log(e," is Offline!"),MeetJS.activeUsers[e].isOnline=!1,setTimeout(()=>{MeetJS.activeUsers[e].isOnline||(delete MeetJS.activeUsers[e],Logger.log(e," is not longer active!"))},1e4)},28e3)}else Logger.log(e," is Online!"),MeetJS.activeUsers[e]={userName:e,lastPing:new Date(Date.now()),isOnline:!0,timeout:setTimeout(()=>{Logger.log(e," is Offline!"),MeetJS.activeUsers[e].isOnline=!1,setTimeout(()=>{MeetJS.activeUsers[e].isOnline||(delete MeetJS.activeUsers[e],Logger.log(e," is not longer active!"))},1e4)},28e3)}};cancelKeepAlive=()=>{this.timerId&&clearTimeout(this.timerId)};onopen=()=>{this.onready(this.url),this.keepAlive()};onmessage=e=>{const t=JSON.parse(e.data);if(t.event!==MeetJS.SOCKET_EVENTS.PONG){if(t.peerName===MeetJS.userName);else if(t.event===MeetJS.SOCKET_EVENTS.PING)this.updateActiveUsers(t.peerName);else if(t.remotePeer===MeetJS.userName)return void this.onMessage(t)}else Logger.log("server pong")};send=e=>{e.peerName=MeetJS.userName,e.peerId=this.id,this.readyState!==this.OPEN?setTimeout(()=>{this.send(e)},1e3):this.superSend(JSON.stringify(e))};onerror=e=>{this.close()};onclose=e=>{if(this.cancelKeepAlive(),MeetJS.getRemainingAttempts()>0){var t=3===MeetJS.getRemainingAttempts()?10:2===MeetJS.getRemainingAttempts()?20:30;Logger.log("Socket is closed. Reconnect will be attempted in "+t+" second.",e.reason),setTimeout((function(){Logger.log("reconneting ....."),MeetJS.emit(MeetJS.LOCAL_EVENTS.RECONNECT)}),t*this.SECOND)}else Logger.log("Socket is closed. Reconnection is Disabled/Exceded Maximum limit.",e.reason)}}t.exports=i},{}],8:[function(e,t,o){const i=function(){this.connectMedia=e=>new Promise((t,o)=>{navigator.mediaDevices.getUserMedia(e).then(e=>{this.localStream=e,t(!0)}).catch(e=>{o("can't able to connect to Media "+e)})}),this.toogleMute=({audio:e,video:t})=>{this.localStream?this.localStream.getTracks().forEach(o=>{"video"===o.kind&&t&&(o.enabled=!o.enabled),"audio"===o.kind&&e&&(o.enabled=!o.enabled)}):Logger.log("Connect to MediaDevices first!")},this.stopMedia=({audio:e,video:t})=>{this.localStream?(this.localStream.getTracks().forEach(o=>{"video"===o.kind&&t&&o.stop(),"audio"===o.kind&&e&&o.stop()}),this.localStream=null):Logger.log("Connect to MediaDevices first!")},this.disconnectDisplayShare=()=>{this.displayStream?(this.displayStream.getTracks().forEach(e=>{"video"===e.kind&&e.stop()}),this.displayStream=null):Logger.log("Connect to screenShare first!")},this.connectShareMedia=()=>new Promise((e,t)=>{navigator.mediaDevices.getDisplayMedia({video:!0}).then(t=>{this.displayStream=t,e(!0)}).catch(e=>{t(e)})})};i.prototype.isMeetJS=!0,t.exports=i},{}],9:[function(e,t,o){const i=function(){};i.prototype.isMeetJS=!0,i.prototype.arrayToKeyValue=e=>{let t={};e.forEach((function(e){t[e]=e}))},i.prototype.keyValueToArray=e=>Object.entries(e),i.prototype.getKeysFromObject=e=>Object.keys(e),t.exports=new i},{}]},{},[5])(5)}));